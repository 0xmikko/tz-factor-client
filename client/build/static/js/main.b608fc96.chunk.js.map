{"version":3,"sources":["screens/ThankYouScreen/robot.png","screens/Auth/ResendScreen/people.png","screens/Auth/ResendScreen/robot.png","config.ts","store/utils/api.ts","store/auth/index.ts","core/profile.ts","store/profile/actions.ts","store/auth/actions.ts","store/events/actions.ts","store/dataloader/actions.ts","store/utils/status.ts","store/features/actions.ts","store/features/index.ts","store/dataloader/index.ts","store/actions.ts","containers/LoginForm/LoginForm.tsx","screens/Auth/LoginScreen/LoginScreen.tsx","screens/Auth/GoogleDoneScreen.tsx","components/Loading.tsx","screens/SplashScreen.tsx","components/PrivateRoute.tsx","screens/Profile/JoinScreen/JoinScreen.tsx","containers/Pricing/FeatureCard.tsx","screens/Profile/PricingScreen/PricingScreen.tsx","screens/ThankYouScreen/ThankYouScreen.tsx","screens/Auth/EmailConfirmScreen.tsx","containers/Select/Select.tsx","screens/Auth/ResendScreen/ResendScreen.tsx","utils/ga.tsx","App.tsx","store/auth/reducer.ts","store/profile/reducer.ts","store/features/reducer.ts","store/dataloader/reducer.ts","store/reducer.ts","store/middleware.js","store/index.ts","serviceWorker.ts","index.tsx","logo.png"],"names":["module","exports","BACKEND_ADDR","window","location","protocol","host","SSO_ADDR","getFullAPIAddress","url","params","decodeURI","startsWith","pos","undefined","key","value","getApiById","api","id","includes","replace","endsWith","TOKEN_RECEIVED","LOGOUT","accessToken","state","auth","access","token","isAuthenticated","refresh","exp","Date","getTime","isRefreshTokenExpired","withAuth","headers","Authorization","getProfile","dispatch","a","profileAction","result","error","type","updateStatusInternally","payload","document","cookie","joinProfileRequest","profile","password","updatePassword","updateProfile","body","JSON","stringify","status","method","endpoint","RSAA","types","login","email","json","authenticate","oauthAuthenticate","provider","code","confirmEmail","refreshAccessToken","credentials","options","timeout","actionTypes","signup","localStorage","setItem","toString","console","log","logout","clear","getTokenAtStartup","getItem","clearStatus","sendEvent","event","formData","URLSearchParams","append","fetch","actionPrefix","STATUS","getList","events","features","formSchema","yup","required","LoginForm","onSubmit","Container","className","src","logo","alt","validationSchema","initialValues","values","isSubmitting","placeholder","name","component","Button","disabled","onClick","assign","href","LoginScreen","useDispatch","fluid","Row","Col","lg","md","xs","Card","actions","GoogleAuthDoneScreen","history","useHistory","authStatus","useSelector","useState","requestSent","setRequestSent","push","FAILURE","alert","parse","search","Loading","style","width","SplashScreen","height","display","alignItems","justifyContent","flexDirection","textAlign","marginTop","PrivateRoute","props","render","min","company","job","industry","JoinScreen","useEffect","ReactGA","category","action","updatedProfile","as","selected","hidden","FeatureCard","data","plan","onSelected","featuresRendered","map","f","i","backgroundColor","bestValue","is_header","color","featureName","icon","marginLeft","marginRight","property","title","price","PricingScreen","plans","features2","List","onPlanSelected","sortByPrice","b","sortByValue","queries","small","screenSizeIs","sort","p","ThankYouScreen","Robot","fontSize","EmailConfirmScreen","SelectBlock","items","allowMany","Map","setState","set","get","onSelect","ResendScreen","submitted","setSubmitted","resendCard","robot","margin","maxHeight","variant","emailCol","paddingLeft","paddingRight","Image","matches","withTracker","WrappedComponent","trackPage","page","pageview","pathname","App","path","exact","to","initialState","errors","signup_success","ACTIVE","createDataLoaderReducer","prefix","UPDATE_NEEDED","Details","hashes","dataLoaderListReducer","LOADING","SUCCESS","dataLoaderDetailsReducer","updateDetailState","hash","newData","meta","UPDATING","combineReducers","jwtDecode","response","non_field_errors","statusText","createApiMiddleware","composeEnhancers","postponedRSAAs","getState","rsaaMiddleware","apiMiddleware","next","isRSAA","refreshToken","isAccessTokenExpired","length","nextAction","forEach","postponed","compose","Boolean","hostname","match","library","add","fas","store","createStore","reducer","applyMiddleware","thunk","Sentry","dsn","initialize","ReactPixel","init","pageView","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b608fc96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.8a2473a3.png\";","module.exports = __webpack_public_path__ + \"static/media/people.1d472f66.png\";","module.exports = __webpack_public_path__ + \"static/media/robot.3523dfcd.png\";","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nexport const BACKEND_ADDR =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:8080'\n    : window.location.protocol + \"//\" + window.location.host;\n\nexport const SSO_ADDR =\n    process.env.NODE_ENV === 'development'\n        ? 'http://localhost:5000'\n        : window.location.protocol + \"//crm.\" + window.location.host;\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {BACKEND_ADDR} from '../../config';\n\nexport const getFullAPIAddress = (\n  url: string,\n  params?: {[P in keyof string]: string[P]},\n  host: string = BACKEND_ADDR,\n) => {\n  // Decode URI if it was in %% format, it's important\n  // when we receive next_url in pagination\n  url = decodeURI(url);\n  url = url.startsWith('http://') ? url : host + url;\n  let pos = 0;\n  if (params !== undefined) {\n    for (let key in params) {\n      let value = params[key];\n      if (value) {\n        url += (pos === 0 ? '?' : '&') + key + '=' + value;\n        pos++;\n      }\n    }\n  }\n  return url;\n};\n\nexport const getApiById = (api: string, id?: string, params?: {[P in keyof string]: string[P]}) => {\n  if (api.includes(':id') && id !== undefined) {\n    api = api.replace(':id', id);\n  }\n\n  api += !api.endsWith('/') ? '/' : '';\n  return getFullAPIAddress(api, params);\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {RootState} from '../index';\n\n// AUTH handlers\n\nexport const LOGIN_REQUEST = '@@auth/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = '@@auth/LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = '@@auth/LOGIN_FAILURE';\n\nexport const SIGNUP_REQUEST = '@@auth/SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = '@@auth/SIGNUP_SUCCESS';\nexport const SIGNUP_FAILURE = '@@auth/SIGNUP_FAILURE';\n\nexport const TOKEN_REQUEST = '@@auth/TOKEN_REQUEST';\nexport const TOKEN_RECEIVED = '@@auth/TOKEN_RECEIVED';\nexport const TOKEN_FAILURE = '@@auth/TOKEN_FAILURE';\n\nexport const CLEAR_AUTH_DATA = '@@auth/CLEAR_AUTH_DATA';\nexport const LOGOUT = '@@auth/LOGOUT';\n\nexport function accessToken(state: RootState) {\n  if (state.auth.access) {\n    return state.auth.access.token;\n  }\n}\n\nexport function isAccessTokenExpired(state: RootState) {\n  if (state.auth.access && state.auth.access.exp) {\n    return 1000 * state.auth.access.exp - new Date().getTime() < 5000;\n  }\n  return true;\n}\n\nexport function refreshToken(state: RootState) {\n  if (state.auth.refresh) {\n    return state.auth.refresh.token;\n  }\n}\n\nexport function isRefreshTokenExpired(state: RootState): boolean {\n  if (state.auth.refresh && state.auth.refresh.exp) {\n    return 1000 * state.auth.refresh.exp - new Date().getTime() < 5000;\n  }\n  return true;\n}\n\nexport function isAuthenticated(state: RootState): boolean {\n  return !isRefreshTokenExpired(state);\n}\n\nexport function errors(state: RootState) {\n  return state.auth.errors;\n}\n\nexport function withAuth(headers = {}) {\n  return (state: RootState) => ({\n    ...headers,\n    Authorization: `Bearer ${accessToken(state)}`,\n  });\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nexport type ProfileStatus =  \"SPLASH\" | \"AUTH_REQUIRED\" | \"FILLING_PROFILE\" | \"CHOOSING_PLAN\" | \"READY\" | \"ERROR\";\n\nexport interface Profile {\n    id?: string,\n    status: ProfileStatus,\n    email: string,\n    name: string,\n    company? : string,\n    job: string,\n    industry: string,\n    plan?: string,\n    avatarURL?: string\n}\n\nexport const APP_STATUS_SPLASH = \"SPLASH\";\nexport const APP_STATUS_AUTH_REQUIRED = \"AUTH_REQUIRED\";\nexport const APP_STATUS_FILLING_PROFILE = \"FILLING_PROFILE\";\nexport const APP_STATUS_CHOOSING_PLAN = \"CHOOSING_PLAN\";\nexport const APP_STATUS_READY= \"READY\";\nexport const APP_STATUS_ERROR = \"ERROR\";\n\n\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {RSAA, RSAAAction} from 'redux-api-middleware';\nimport {getFullAPIAddress} from '../utils/api';\nimport {withAuth} from '../auth';\nimport {AuthPayload} from '../auth/reducer';\nimport {ThunkAction} from 'redux-thunk';\nimport {RootState} from '../index';\nimport {Action} from 'redux';\nimport {APP_STATUS_ERROR, Profile, ProfileStatus} from '../../core/profile';\n\n// Get user profile from server\nexport const getProfile = (): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  const endpoint = '/api/profile/';\n  const result = await dispatch(profileAction('GET', endpoint));\n  if (result.error || result.type === 'PROFILE_FAILURE') {\n    dispatch(updateStatusInternally(APP_STATUS_ERROR))\n  }\n\n  if (!result.error && result.type === 'PROFILE_SUCCESS') {\n    const id = result.payload.id;\n    document.cookie = \"\"\n  }\n\n};\n\n// Join update provider integrated flow\nexport const joinProfileRequest = (\n  profile: Profile,\n  password: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  const result = await dispatch(updatePassword(password));\n  if (!result.error && result.type === 'PROFILE_SUCCESS') {\n    await dispatch(updateProfile(profile));\n  }\n};\n\nexport const updatePassword = (\n  password: string,\n): RSAAAction<any, Profile, void> => {\n  const endpoint = '/api/profile/password/';\n  const body = JSON.stringify({password});\n  return profileAction('POST', endpoint, body);\n};\n\nexport const updateProfile = (\n  profile: Profile,\n): RSAAAction<any, Profile, void> => {\n  const endpoint = '/api/profile/';\n  const body = JSON.stringify({...profile});\n  return profileAction('POST', endpoint, body);\n};\n\nexport const updateStatusInternally = (status: ProfileStatus) => {\n  return {type: 'PROFILE_UPDATE_STATUS', status};\n};\n\nconst profileAction = (\n  method: 'GET' | 'POST',\n  endpoint: string,\n  body?: string,\n): RSAAAction<any, Profile, void> => {\n  return {\n    [RSAA]: {\n      endpoint: getFullAPIAddress(endpoint),\n      method: method,\n      body: body,\n      headers: withAuth({'Content-Type': 'application/json'}),\n      types: ['PROFILE_REQUEST', 'PROFILE_SUCCESS', 'PROFILE_FAILURE'],\n    },\n  };\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\nimport {Action} from 'redux';\nimport {ThunkAction} from 'redux-thunk';\nimport {RSAA, RSAAAction, RSAAResultAction,} from 'redux-api-middleware';\nimport {getFullAPIAddress} from '../utils/api';\nimport * as actionTypes from './';\n\nimport {RootState} from '../index';\nimport {AuthPayload} from './reducer';\nimport {getProfile, updateStatusInternally} from '../profile/actions';\nimport {APP_STATUS_AUTH_REQUIRED} from '../../core/profile';\nimport {SSO_ADDR} from \"../../config\";\n\nexport const login = (\n  email: string,\n  password: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  const endpoint = '/auth/login/';\n  const json = JSON.stringify({email, password});\n\n  dispatch(authenticate(endpoint, json));\n};\n\nexport const oauthAuthenticate = (\n  provider: string,\n  code: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  const endpoint = '/auth/google/done/';\n  const json = JSON.stringify({provider, code});\n\n  dispatch(authenticate(endpoint, json));\n};\n\nexport const confirmEmail = (\n  email: string,\n  code: string,\n  id: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  const endpoint = '/auth/confirm/';\n  const json = JSON.stringify({email, code, id});\n\n  dispatch(authenticate(endpoint, json));\n};\n\n// Send request for refresh token\n\nexport const refreshAccessToken = (\n  token: string,\n): RSAAAction<any, AuthPayload, void> => ({\n  [RSAA]: {\n    endpoint: getFullAPIAddress('/auth/token/refresh/', undefined, SSO_ADDR),\n    method: 'POST',\n    body: JSON.stringify({refresh: token}),\n    headers: {'Content-Type': 'application/json'},\n    credentials: 'same-origin',\n    // @ts-ignore\n    options: {timeout: 10000},\n    types: [\n      actionTypes.TOKEN_REQUEST,\n      actionTypes.TOKEN_RECEIVED,\n      actionTypes.TOKEN_FAILURE,\n    ],\n  },\n});\n\nexport const signup = (\n  email: string,\n  password: string,\n): RSAAAction<any, AuthPayload, void> => ({\n  [RSAA]: {\n    endpoint: getFullAPIAddress('/auth/signup/', undefined, SSO_ADDR),\n    method: 'POST',\n    body: JSON.stringify({email, password}),\n    headers: {'Content-Type': 'application/json'},\n    types: [\n      actionTypes.SIGNUP_REQUEST,\n      actionTypes.SIGNUP_SUCCESS,\n      actionTypes.SIGNUP_FAILURE,\n    ],\n  },\n});\n\n/*\n  Authenticate flow\n  @param endpoint\n  @param body\n */\nexport const authenticate = (\n  endpoint: string,\n  body: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n  const result = await dispatch<AuthPayload, void>({\n    [RSAA]: {\n      endpoint: getFullAPIAddress(endpoint, undefined, SSO_ADDR),\n      method: 'POST',\n      body: body,\n      headers: {'Content-Type': 'application/json'},\n      types: [\n        actionTypes.LOGIN_REQUEST,\n        actionTypes.LOGIN_SUCCESS,\n        actionTypes.LOGIN_FAILURE,\n      ],\n    },\n  });\n\n  if (\n    !result.error &&\n    result.payload.refresh &&\n    result.type === actionTypes.LOGIN_SUCCESS\n  ) {\n    localStorage.setItem('token', result.payload.refresh.toString());\n    await dispatch(getProfile());\n  }\n\n  console.log(result);\n};\n\nexport const logout = () => {\n  // Clear local storage at logout\n  localStorage.clear();\n  return {\n    type: actionTypes.LOGOUT,\n  };\n};\n\nexport const getTokenAtStartup = (): ThunkAction<\n  void,\n  RootState,\n  unknown,\n  Action<string>\n> => async dispatch => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const result = await dispatch(refreshAccessToken(token));\n    if (\n      !result.error &&\n      result.payload.refresh &&\n      result.type === actionTypes.TOKEN_RECEIVED\n    ) {\n      await dispatch(getProfile());\n    } else {\n      await dispatch(updateStatusInternally(APP_STATUS_AUTH_REQUIRED));\n    }\n  } else {\n    await dispatch(updateStatusInternally(APP_STATUS_AUTH_REQUIRED));\n  }\n};\n\nexport const clearStatus = () => ({\n  type: actionTypes.CLEAR_AUTH_DATA,\n});\n\ndeclare module 'redux-thunk' {\n  /*\n   * Overload to add api middleware support to Redux's dispatch() function.\n   * Useful for react-redux or any other library which could use this type.\n   */\n\n  interface ThunkDispatch<S, E, A extends Action> {\n    <T extends A>(action: T): T;\n    <R>(asyncAction: ThunkAction<R, S, E, A>): R;\n    <Payload, Meta>(action: RSAAAction<any, Payload, Meta>): Promise<\n      RSAAResultAction<Payload, Meta>\n    >;\n  }\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\nimport {ThunkAction} from 'redux-thunk';\nimport {RootState} from '../index';\nimport {Action} from 'redux';\nimport {getFullAPIAddress} from \"../utils/api\";\n\n// Sends pressed event\nexport const sendEvent = (\n  event: string,\n): ThunkAction<void, RootState, unknown, Action<string>> => async dispatch => {\n\n  const formData = new URLSearchParams();\n  formData.append('goal', event);\n  formData.append('url', '/resend');\n\n  const result = await fetch(getFullAPIAddress('/e/goal/'), {\n    method: 'POST',\n    body:formData,\n    headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'},\n    credentials: \"include\",\n  });\n\n  console.log(result)\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {RSAA} from 'redux-api-middleware';\nimport {getApiById} from '../utils/api';\nimport * as actionTypes from './index';\nimport {withAuth} from '../auth';\n\nexport const createDataLoaderListActions = (\n  api: string,\n  actionPrefix: string,\n) => {\n  return () => ({\n    [RSAA]: {\n      endpoint: getApiById(api, ''),\n      method: 'GET',\n      headers: withAuth({'Content-Type': 'application/json'}),\n      types: [\n        actionPrefix + actionTypes.LIST_REQUEST,\n        actionPrefix + actionTypes.LIST_SUCCESS,\n        actionPrefix + actionTypes.LIST_FAILURE,\n      ],\n    },\n  });\n};\n\nexport const createDataLoaderDetailActions = (\n  api: string,\n  actionPrefix: string,\n) => {\n  return (id: string, hash?: string) => ({\n    [RSAA]: {\n      endpoint: getApiById(api, id),\n      method: 'GET',\n      headers: withAuth({'Content-Type': 'application/json'}),\n      types: [\n        {\n          type: actionPrefix + actionTypes.DETAIL_REQUEST,\n          meta: {id, hash},\n        },\n        {\n          type: actionPrefix + actionTypes.DETAIL_SUCCESS,\n          meta: {id, hash},\n        },\n        {\n          type: actionPrefix + actionTypes.DETAIL_FAILURE,\n          meta: {id, hash},\n        },\n      ],\n    },\n  });\n};\n\nexport const createDataLoaderCreateUpdateDataAction = <T>(\n  apiCreate: string,\n  apiUpdate: string,\n  actionPrefix: string,\n) => (id: string, data: T, hash: string = '0') => {\n  console.log('[ACTIONS]: Update Data Loader Detail', id, data, hash);\n\n  const api = id.startsWith('new')\n    ? getApiById(apiCreate)\n    : getApiById(apiUpdate, id);\n\n  if (id === undefined) {\n    throw new Error(\n      'Error in updateDataLoaderDetail, wrong parameters!\\napi:' +\n        api +\n        '\\nid: ' +\n        id,\n    );\n  }\n\n  const method = id.startsWith('new') ? 'POST' : 'PUT';\n\n  console.log('DATA SENT:', data);\n\n  return {\n    [RSAA]: {\n      endpoint: api,\n      method: method,\n      headers: withAuth({'Content-Type': 'application/json'}),\n      body: JSON.stringify(data),\n      types: [\n        {\n          type: actionPrefix + actionTypes.UPLOAD_REQUEST,\n          meta: {id, hash},\n        },\n        {\n          type: actionPrefix + actionTypes.UPLOAD_SUCCESS,\n          meta: {id, hash},\n        },\n        {\n          type: actionPrefix + actionTypes.UPLOAD_FAILURE,\n          meta: {id, hash},\n        },\n      ],\n    },\n  };\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nexport enum STATUS {\n  UPDATE_NEEDED = 'STATUS: UPDATE_NEEDED',\n  ACTIVE = 'STATUS: ACTIVE',\n  LOADING = '@@status/LOADING',\n  UPDATING = '@@status/UPDATING',\n  SUCCESS = '@@status/SUCCESS',\n  FAILURE = '@@status/FAILURE',\n}\n\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {endpoint, FEATURES_PREFIX} from './';\n\nimport {createDataLoaderListActions,} from '../dataloader/actions';\nimport {SSO_ADDR} from \"../../config\";\n\nexport const getList = createDataLoaderListActions(\n  SSO_ADDR + endpoint,\n  FEATURES_PREFIX,\n);\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n// HYPOTHESES\nexport const FEATURES_PREFIX = 'FEATURES@@';\nexport const endpoint = '/api/features/';\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {DataItem, DataLoaderDetailsState} from \"./reducer\";\n\nexport const LIST_REQUEST = 'LIST_REQUEST';\nexport const LIST_UPDATE = 'LIST_UPDATE';\nexport const LIST_SUCCESS = 'LIST_SUCCESS';\nexport const LIST_FAILURE = 'LIST_FAILURE';\n\nexport const DETAIL_REQUEST = 'DETAIL_REQUEST';\nexport const DETAIL_UPDATE = 'DETAIL_UPDATE';\nexport const DETAIL_SUCCESS = 'DETAIL_SUCCESS';\nexport const DETAIL_FAILURE = 'DETAIL_FAILURE';\n\nexport const UPLOAD_REQUEST = 'UPLOAD_REQUEST';\nexport const UPLOAD_SUCCESS = 'UPLOAD_SUCCESS';\nexport const UPLOAD_FAILURE = 'UPLOAD_FAILURE';\n\nexport function getDetailsItem<T>(data: DataLoaderDetailsState<T>, id: string) : DataItem<T> | undefined {\n    if (!data || !data.data[id]) return undefined;\n    return data.data[id]\n\n}\n\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport * as auth from './auth/actions';\nimport * as profile from './profile/actions';\nimport * as events from './events/actions';\nimport * as features from './features/actions'\n\nexport default {\n  auth,\n  events,\n  features,\n  profile,\n\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {Button, Container} from 'react-bootstrap';\nimport {BACKEND_ADDR} from '../../config';\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\nimport * as yup from \"yup\";\nimport logo from \"../../logo.png\"\n\ninterface Props {\n  onSubmit: (email: string, password: string) => void;\n}\n\nconst formSchema = yup.object({\n  email: yup\n      .string()\n      .required()\n      .email(),\n  password: yup\n      .string()\n      .required()\n});\n\ntype FormValues = yup.InferType<typeof formSchema>;\n\n/**\n * LoginFom renders login form for Login screen\n * @param onSubmit {Function} Submit login data\n * @constructor\n */\nexport const LoginForm: React.FC<Props> = ({onSubmit}: Props) => {\n  const initialValues: FormValues = {\n    email: '',\n    password: '',\n  };\n  const onSubmitHandler = (values: FormValues) => {\n    onSubmit(values.email, values.password);\n  };\n\n  return (\n    <Container className={'login-form'}>\n        <img src={logo} alt={\"logo\"}/>\n        <Formik\n          validationSchema={formSchema}\n          initialValues={initialValues}\n          onSubmit={onSubmitHandler}>\n          {({isSubmitting}) => (\n            <Form className=\"login-form\">\n              <Field type=\"text\" placeholder=\"Email\" name=\"email\" />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className={'feedback'}\n              />\n              <Field type=\"password\" placeholder=\"Password\" name=\"password\" />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className={'feedback'}\n              />\n              <Button\n                type={'submit'}\n                disabled={isSubmitting}>\n                Login\n              </Button>\n            </Form>\n          )}\n\n        </Formik>\n\n        <div className=\"divider-text\">or</div>\n            <Button className=\"btn-outline-google btn-block\" onClick={() => {window.location.assign(BACKEND_ADDR + '/auth/login/google/')}}>\n                Sign in with Google\n            </Button>\n        {/*<Button className=\"btn-outline-apple btn-block\">*/}\n        {/*    Sign in with Apple*/}\n        {/*</Button>*/}\n        <div className=\"tx-13 mg-t-20 tx-center\">\n            Don't have an account? <a href={\"/free-trial/\"}>Create an Account</a>\n        </div>\n    </Container>\n  );\n};\n\nexport default LoginForm;\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport {Card, Col, Container, Row} from 'react-bootstrap';\nimport {useDispatch} from 'react-redux';\nimport actions from '../../../store/actions';\nimport LoginForm from '../../../containers/LoginForm/LoginForm';\nimport './LoginScreen.css'\n\nexport const LoginScreen: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = (email: string, password: string) => {\n    // updating current profile\n    dispatch(actions.auth.login(email, password));\n  };\n\n  return (\n    <Container className=\"onescreen login-screen\" fluid>\n      <Row>\n        <Col lg={12} md={12} xs={12}>\n          <Card>\n          <LoginForm onSubmit={onSubmit} />\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\nimport {parse} from 'querystring';\nimport {BeatLoader} from 'react-spinners';\nimport actions from '../../store/actions';\nimport {RootState} from '../../store';\nimport {isAuthenticated} from '../../store/auth';\nimport {STATUS} from \"../../store/utils/status\";\n\ninterface OAuthCompleteProps {\n  method: 'signup' | 'login';\n}\n\nexport const GoogleAuthDoneScreen: React.FC<OAuthCompleteProps> = ({\n  method,\n}: OAuthCompleteProps) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const authStatus = useSelector((state: RootState) => state.auth.status);\n  const [requestSent, setRequestSent] = useState(false);\n\n  // If signedIn, redirect to core\n  const isSignedIn = useSelector((state: RootState) => isAuthenticated(state));\n  if (isSignedIn) {\n    history.push('/');\n  }\n\n  // If signin in fails, inform user and redirect to /\n  if (authStatus === STATUS.FAILURE && requestSent) {\n    alert(\"Sorry, there is an internal problem with signing in. Please, try later\");\n    history.push(\"/login\")\n  }\n\n  // parse querystring & get code\n  const values = parse(history.location.search) as {code: string};\n\n  if (values.code !== '' && !requestSent) {\n    setRequestSent(true);\n    dispatch(actions.auth.clearStatus());\n    dispatch(actions.auth.oauthAuthenticate('google-oauth2', values.code));\n  }\n\n  return <BeatLoader />;\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport {BeatLoader} from 'react-spinners';\n\nexport const Loading : React.FC = () => (\n  <div style={{width: '100%'}}>\n    <BeatLoader />\n  </div>\n);\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport {Col, Container, Row} from 'react-bootstrap';\nimport {Loading} from '../components/Loading';\n\nexport const SplashScreen: React.FC = () => {\n  return (\n    <Container\n      style={{\n        width: '100vh',\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}>\n      <Row>\n        <Col>\n          <Loading />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <p style={{textAlign: 'center', marginTop: '20px'}}>Loading, please wait...</p>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport {Route, RouteProps} from 'react-router';\nimport {useSelector} from 'react-redux';\nimport {RootState} from '../store';\nimport {isAuthenticated} from '../store/auth';\nimport {LoginScreen} from \"../screens/Auth/LoginScreen/LoginScreen\";\n\nexport function PrivateRoute({...props}: RouteProps) {\n  const isSignIn = useSelector((state: RootState) => isAuthenticated(state));\n\n  if (isSignIn) {\n    return <Route {...props} />;\n  }\n\n  delete props.component;\n  delete props.render;\n  return (\n    <Route\n      {...props}\n      render={({location}) => (\n        <LoginScreen />\n      )}\n    />\n  );\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useEffect} from 'react';\nimport {Button, Col, Container, Row} from 'react-bootstrap';\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\nimport ReactGA from 'react-ga';\nimport * as yup from 'yup';\nimport {useDispatch, useSelector} from 'react-redux';\nimport actions from '../../../store/actions';\nimport {Profile} from '../../../core/profile';\nimport {RootState} from '../../../store';\nimport './JoinScreen.css'\nimport {useHistory} from \"react-router\";\n\nconst formSchema = yup.object({\n  name: yup.string().required(),\n  password: yup\n    .string()\n    .required()\n    .min(8),\n\n  company: yup.string(),\n  job: yup.string().required(),\n  industry: yup.string().required(),\n});\n\ntype FormValues = yup.InferType<typeof formSchema>;\n\nexport const JoinScreen: React.FC = () => {\n\n  const initialValues: FormValues = {\n    name: '',\n    password: '',\n    company: '',\n    job: '',\n    industry: '',\n  };\n\n  const history = useHistory();\n\n  useEffect(() => {\n    ReactGA.event({\n      category: 'User',\n      action: 'Confirm email',\n    });\n    history.replace(\"/join\")\n  }, [history]);\n\n\n  const dispatch = useDispatch();\n  const profile: Profile = useSelector((state: RootState) => state.profile);\n\n  console.log(profile);\n\n  const onSubmit = (values: FormValues) => {\n    // updating current profile\n    const updatedProfile = {\n      ...profile,\n      ...values,\n    };\n    dispatch(actions.profile.joinProfileRequest(updatedProfile, values.password));\n  };\n\n  return (\n    <Container className=\"join-screen onescreen\" fluid>\n      <Row>\n        <Col>\n          <h1>Welcome to Willie!</h1>\n          <h2>Please, finish your registration</h2>\n          <Formik\n            validationSchema={formSchema}\n            initialValues={initialValues}\n            onSubmit={onSubmit}>\n            {({isSubmitting}) => (\n              <Form className=\"singnup-form\">\n                <Field type=\"text\" placeholder=\"Name\" name=\"name\" />\n                <ErrorMessage\n                  name=\"name\"\n                  component=\"div\"\n                  className={'feedback'}\n                />\n                <Field type=\"password\" placeholder=\"Password\" name=\"password\" />\n                <ErrorMessage\n                  name=\"password\"\n                  component=\"div\"\n                  className={'feedback'}\n                />\n                <Field type=\"text\" placeholder=\"Company\" name=\"company\" />\n                <ErrorMessage\n                  name=\"company\"\n                  component=\"div\"\n                  className={'feedback'}\n                />\n                <Field name=\"job\" as=\"select\">\n                  <option value=\"\" selected disabled hidden>\n                    Your role\n                  </option>\n                  <option>CEO/Owner/Founder</option>\n                  <option>Consulting/Professional Services</option>\n                  <option>Creative Services/ Design</option>\n                  <option>Engineering</option>\n                  <option>Finance</option>\n                  <option>HR</option>\n                  <option>IT</option>\n                  <option>Legal</option>\n                </Field>\n                <ErrorMessage\n                  name=\"job\"\n                  component=\"div\"\n                  className={'feedback'}\n                />\n                <Field name=\"industry\" as=\"select\">\n                  <option value=\"\" selected disabled hidden>\n                    Your industry\n                  </option>\n                  <option>Arts and entertainment</option>\n                  <option>Automotive</option>\n                  <option>Beauty and fitness</option>\n                  <option>Books and optionterature</option>\n                  <option>Business and industrial markets</option>\n                  <option>Computers and electronics</option>\n                  <option>Finance</option>\n                  <option>Food and drink</option>\n                  <option>Games</option>\n                  <option>Healthcare</option>\n                  <option>Hobbies and leisure</option>\n                  <option>Home and garden</option>\n                  <option>Internet and telecom</option>\n                  <option>Jobs and education</option>\n                  <option>Law and government</option>\n                  <option>News</option>\n                  <option>Onoptionne communities</option>\n                  <option>People and society</option>\n                  <option>Pets and animals</option>\n                  <option>Real estate</option>\n                  <option>Reference</option>\n                  <option>Science</option>\n                  <option>Shopping</option>\n                  <option>Sports</option>\n                  <option>Travel</option>\n                  <option>Other</option>\n                </Field>\n                <ErrorMessage\n                    name=\"industry\"\n                    component=\"div\"\n                    className={'feedback'}\n                />\n                <Button\n                  type={'submit'}\n                  className=\"theme-button\"\n                  disabled={isSubmitting}>\n                  Submit\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport {Button, Card} from 'react-bootstrap';\nimport {Feature} from '../../core/features';\nimport {PricingPlan} from '../../core/pricing';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport actions from '../../store/actions';\nimport {useDispatch} from 'react-redux';\n\ninterface FeatureCardProps {\n  type: 'small' | 'wide';\n  data: Feature[];\n  plan: PricingPlan;\n  onSelected: (id: string) => void;\n}\n\nexport const FeatureCard: React.FC<FeatureCardProps> = ({\n  type,\n  data,\n  plan,\n  onSelected,\n}) => {\n  const dispatch = useDispatch();\n\n  const onClick = (property: string) => {\n    dispatch(actions.events.sendEvent(property));\n  };\n\n  const featuresRendered = data.map((f, i) => {\n    const backgroundColor = i % 2 && !plan.bestValue ? 'highlight ' : '';\n\n    if (f.is_header) {\n      return <h3 className={'feature-point ' + backgroundColor}> {f.name}</h3>;\n    }\n\n    if (type === 'small' && f[plan.plan] === '') return <></>;\n\n    const color = f[plan.plan] === '' ? ' hide' : '';\n\n    const featureName = f[plan.plan] === '+' ? f.name : f[plan.plan];\n\n    const icon =\n      f[plan.plan] !== '' ? (\n        <FontAwesomeIcon\n          icon={'question-circle'}\n          style={{marginLeft: '5px', marginRight: '8px'}}\n          color={'rgba(0,110,255,0.51)'}\n          onClick={() => onClick(f.name)}\n        />\n      ) : (\n        <></>\n      );\n\n    return (\n      <span className={'feature-point ' + backgroundColor + color}>\n        {featureName}\n        {icon}\n      </span>\n    );\n  });\n\n  return (\n    <Card className={'price-block ' + (plan.bestValue ? 'popular' : '')}>\n      <span className={'best-value'}>\n        {plan.bestValue ? 'BEST VALUE' : ' '}\n      </span>\n      <h3>{plan.title}</h3>\n      <br />\n      <span className={'price'}>{plan.price ? `$${plan.price}` : 'FREE'}</span>\n      <span> user / month</span>\n      <Button onClick={() => onSelected(plan.title)}>START TRIAL</Button>\n      <hr />\n\n      {featuresRendered}\n      <Button onClick={() => onSelected(plan.title)}>START TRIAL</Button>\n    </Card>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useEffect} from 'react';\nimport {Button, Card, Col, Row} from 'react-bootstrap';\nimport {PricingPlan} from '../../../core/pricing';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {RootState} from '../../../store';\nimport actions from '../../../store/actions';\nimport ReactGA from 'react-ga';\nimport './PricingScreen.css';\nimport {useHistory} from 'react-router';\nimport Media from 'react-media';\nimport {FeatureCard} from '../../../containers/Pricing/FeatureCard';\nimport {Profile} from \"../../../core/profile\";\n\ninterface PricingCardProps {\n  plan: PricingPlan;\n  onSelected: (id: string) => void;\n}\n\nconst PricingCard: React.FC<PricingCardProps> = ({plan, onSelected}) => {\n  return (\n    <Card className={'price-block ' + (plan.bestValue ? 'popular' : '')}>\n      <span className={'best-value'}>\n        {plan.bestValue ? 'BEST VALUE' : ' '}\n      </span>\n      <h3>{plan.title}</h3>\n      <br />\n      <span className={'price'}>{plan.price ? `$${plan.price}` : 'FREE'}</span>\n      <span> user / month</span>\n      <Button onClick={() => onSelected(plan.title)}>START TRIAL</Button>\n      <hr />\n    </Card>\n  );\n};\n\nexport const PricingScreen: React.FC = () => {\n  const plans: PricingPlan[] = [\n    {\n      plan: 'basic_plan',\n      title: 'Basic',\n      bestValue: false,\n      price: 0,\n    },\n    {\n      plan: 'premium_plan',\n      title: 'Premium',\n      bestValue: true,\n      price: 8.99,\n    },\n    {\n      plan: 'teams_plan',\n      title: 'Teams',\n      bestValue: false,\n      price: 14.99,\n    },\n  ];\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(actions.features.getList());\n  }, [dispatch]);\n\n  useEffect(() => {\n    console.log('Send event fill profile');\n    ReactGA.event({\n      category: 'User',\n      action: 'Fill profile',\n    });\n    history.replace('/pricing');\n  }, []);\n\n  let profile: Profile = useSelector((state: RootState) => state.profile);\n  const {data, status} = useSelector(\n    (state: RootState) => state.features2.List,\n  );\n\n  const onPlanSelected = (plan: string) => {\n    profile.plan = plan;\n    dispatch(actions.profile.updateProfile(profile));\n  };\n\n  const sortByPrice = (a: PricingPlan, b: PricingPlan): number => {\n    return a.price - b.price;\n  };\n\n  const sortByValue = (a: PricingPlan, b: PricingPlan): number => {\n    if (a.bestValue) return -1;\n    if (b.bestValue) return 1;\n    return 0;\n  };\n\n  return (\n    <div className=\"onescreen pricing-screen\">\n      <Row>\n        <Col>\n          <h1>Select plan you'd like to try</h1>\n          <h2>Try all features free for 14 days</h2>\n          <br />\n        </Col>\n      </Row>\n\n      <Row className={'pricing'}>\n        <Media queries={{small: '(max-width: 768px)'}}>\n          {screenSizeIs =>\n            screenSizeIs.small\n              ? plans.sort(sortByValue).map(p => (\n                  <Col lg=\"4\" md=\"4\" xs=\"12\">\n                    <FeatureCard\n                      data={data}\n                      type=\"small\"\n                      plan={p}\n                      onSelected={onPlanSelected}\n                    />\n                  </Col>\n                ))\n              : plans.sort(sortByPrice).map(p => (\n                  <Col lg=\"4\" md=\"4\" xs=\"12\">\n                    <FeatureCard\n                      data={data}\n                      type=\"wide\"\n                      plan={p}\n                      onSelected={onPlanSelected}\n                    />\n                  </Col>\n                ))\n          }\n        </Media>\n      </Row>\n    </div>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useEffect} from 'react';\nimport {Button, Card, Container} from 'react-bootstrap';\nimport Robot from './robot.png';\nimport ReactGA from 'react-ga';\nimport './ThankYouScreen.css'\nimport {useHistory} from \"react-router\";\nimport {useDispatch} from \"react-redux\";\nimport actions from \"../../store/actions\";\n\nexport const ThankYouScreen: React.FC = () => {\n\n  const history = useHistory();\n\n  useEffect(() => {\n    console.log(\"Registered\");\n    ReactGA.event({\n      category: 'User',\n      action: 'Registered!',\n    });\n    history.replace(\"/thanks\")\n  }, []);\n\n  const dispatch = useDispatch();\n\n  const onClick = () => {\n    dispatch(actions.events.sendEvent(\"interview\"));\n  };\n\n  return (\n    <Container className=\"onescreen thanks-screen\" fluid>\n      <Card>\n        <p>\n          <img src={Robot} width={140} style={{marginLeft: '30px'}} />\n        </p>\n        <h1 style={{marginTop: '0px'}}>Thank you for joining us!</h1>\n\n        <p style={{fontSize: '20px', marginTop: '20px'}}>\n          Willie is in development now, we'll inform you about it's release.\n          <br />\n          <br /> We are glad to see in early adopters, your opinion is very valuable for us. We offer you $20 Willie promocode for 30-min interview. <br/><br/>\n          <Button onClick={onClick}>Arrange for an interview</Button><br/><br/>\n          Help us to make amazing product.\n        </p>\n      </Card>\n    </Container>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\nimport {parse} from 'querystring';\nimport {BeatLoader} from 'react-spinners';\nimport actions from '../../store/actions';\nimport {RootState} from '../../store';\nimport {isAuthenticated} from '../../store/auth';\nimport {STATUS} from \"../../store/utils/status\";\n\nexport const EmailConfirmScreen: React.FC = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const authStatus = useSelector((state: RootState) => state.auth.status);\n  const [requestSent, setRequestSent] = useState(false);\n\n  // If signedIn, redirect to core\n  const isSignedIn = useSelector((state: RootState) => isAuthenticated(state));\n  if (isSignedIn) {\n    history.push('/');\n  }\n\n  // If signin in fails, inform user and redirect to /\n  if (authStatus === STATUS.FAILURE && requestSent) {\n    alert(\"Sorry, there is an internal problem with signing in. Please, try later\");\n    history.push(\"/login\")\n  }\n\n  // parse querystring & get code\n  const values = parse(history.location.search.replace('?', '')) as {email: string, code: string, id:string };\n\n  console.log(values);\n\n  if (values.code !== '' && !requestSent) {\n    setRequestSent(true);\n    dispatch(actions.auth.clearStatus());\n    dispatch(actions.auth.confirmEmail(values.email, values.code, values.id));\n  }\n\n  return <BeatLoader />;\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useState} from 'react';\nimport {Button} from 'react-bootstrap';\nimport {useDispatch} from \"react-redux\";\nimport actions from \"../../store/actions\";\n\nexport interface SelectItem {\n  property: string;\n  title: string;\n}\n\ninterface Select {\n  items: SelectItem[];\n  allowMany: boolean;\n}\n\nexport const SelectBlock: React.FC<Select> = ({items, allowMany}) => {\n  const [state, setState] = useState(new Map());\n\n  const dispatch = useDispatch();\n\n  const onSelect = (property: string) => {\n    if (allowMany) {\n      // We simply invert map property if allowMany is set up\n      setState(new Map(state.set(property, !state.get(property))));\n    } else {\n      // We create a new map with one selected item if allowMany is forbidden\n      const p = new Map();\n      p.set(property, true);\n      setState(p);\n    }\n    dispatch(actions.events.sendEvent(property))\n  };\n\n  return (\n    <div >\n      {items.map(b => (\n        <Button\n          onClick={() => onSelect(b.property)}\n          className={ state.get(b.property) ? 'statebutton pressed' : 'statebutton'}>\n          {b.title}\n\n        </Button>\n      ))}\n    </div>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useState} from 'react';\nimport {Button, Card, Col, Container, Row} from 'react-bootstrap';\nimport Media from 'react-media';\nimport {useDispatch} from 'react-redux';\nimport {SelectBlock, SelectItem} from '../../../containers/Select/Select';\nimport Image from './people.png';\nimport './ResendScreen.css';\nimport logo from '../../../logo.png';\nimport robot from './robot.png';\n\nexport const ResendScreen: React.FC = () => {\n  const dispatch = useDispatch();\n  const [submitted, setSubmitted] = useState(false);\n\n  const onSubmit = () => {\n    // updating currrent profile\n    // dispatch(actions.profile.joinProfileRequest());\n  };\n\n  const p1questions: SelectItem[] = [\n    {\n      property: 'problem_timesaving',\n      title: 'Time savings',\n    },\n    {\n      property: 'problem_planning',\n      title: 'Better meeting planning',\n    },\n    {\n      property: 'problem_recording',\n      title: 'Voice recording',\n    },\n    {\n      property: 'problem_actionplan',\n      title: 'Clear action plan',\n    },\n  ];\n\n  const p2questions: SelectItem[] = [\n    {\n      property: 'meetings_0_3',\n      title: 'Less 3',\n    },\n    {\n      property: 'meetings_3_5',\n      title: '3-5',\n    },\n    {\n      property: 'meetings_5_15',\n      title: '5-15',\n    },\n    {\n      property: 'meetings_15+',\n      title: '15+',\n    },\n  ];\n\n  const p3questions: SelectItem[] = [\n    {\n      property: 'tool_outlook',\n      title: 'MS Outlook',\n    },\n    {\n      property: 'tool_gcalendar',\n      title: 'Google Calendar',\n    },\n    {\n      property: 'tool_calendly',\n      title: 'Calendly',\n    },\n    {\n      property: 'tool_doodle',\n      title: 'Doodle',\n    },\n  ];\n\n  const resendCard = submitted ? (\n    <Col lg={6} md={0} xs={0}>\n      <Card>\n        <div style={{display: 'flex', flexDirection: 'column'}} className={'thanks-block'}>\n          <h2 style={{marginTop: '10%'}}>Thanks for helping us to deliver the best product</h2>\n<br/>\n          <img\n            src={robot}\n            height={'100%'}\n            width={'auto'}\n            style={{margin: 'auto', maxHeight: '200px'}}\n          /><br/>\n          <br/>\n          Don't forget to check your email to confirm your registration.<br/><br/>\n        </div>\n      </Card>\n    </Col>\n  ) : (\n    <Col lg={6} md={0} xs={0}>\n      <Card>\n        <h2>Help us to deliver the best value for you</h2>\n        <h4>1. How many meetings do you have a week?</h4>\n        <SelectBlock items={p1questions} allowMany={true} />\n        <h4>2. How many meetings you have a week?</h4>\n        <SelectBlock items={p2questions} allowMany={false} />\n\n        <h4>3. Which tools do you use for organising meetings?</h4>\n        <SelectBlock items={p3questions} allowMany={true} />\n        <br />\n        <br />\n        <Button variant={'primary'} onClick={() => setSubmitted(true)}>Submit</Button>\n      </Card>\n    </Col>\n  );\n\n  const emailCol = (\n    <Col lg={6} md={12} xs={12} style={{paddingLeft: '5%', paddingRight: '5%'}}>\n      <img src={logo} height={'80px'} />\n      <h1>Thank you for choosing Willie!</h1>\n      <p className={'notice'}>\n        We’ve sent you a letter with activation link to your email address.{' '}\n        <br />\n        <br />\n        Please check your inbox and follow the link to complete your\n        registration.\n        <br />\n        <br />\n        If you have any questions, please{' '}\n        <a href={'mailto:hello@willie.ai'}>contact us.</a>\n        {/*Do not see email in your box?*/}\n      </p>\n      <img src={Image} width={'100%'} />\n      {/*<Button>Resend email</Button>*/}\n    </Col>\n  );\n\n  return (\n    <Container className=\"resend-screen onescreen\" fluid>\n      <Row>\n        <Media queries={{small: '(max-width: 992px)'}}>\n          {matches =>\n            matches.small ? (\n              <>\n                {' '}\n                {emailCol} {resendCard}\n              </>\n            ) : (\n              <>\n                {resendCard}\n                {emailCol}\n              </>\n            )\n          }\n        </Media>\n      </Row>\n    </Container>\n  );\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useEffect} from \"react\";\nimport ReactGA, {FieldsObject} from \"react-ga\";\nimport {RouteComponentProps} from \"react-router-dom\";\n\nexport const withTracker = <P extends RouteComponentProps>(\n    WrappedComponent: React.ComponentType<P>,\n    options: FieldsObject = {},\n) => {\n    const trackPage = (page: string) => {\n        ReactGA.set({ page, ...options });\n        ReactGA.pageview(page);\n    };\n\n    return (props: P) => {\n        useEffect(() => {\n            trackPage(props.location.pathname);\n        }, [props.location.pathname]);\n\n        return <WrappedComponent {...props} />;\n    };\n};\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Redirect, Route, Switch} from 'react-router';\n\nimport {LoginScreen} from './screens/Auth/LoginScreen/LoginScreen';\nimport {GoogleAuthDoneScreen} from './screens/Auth/GoogleDoneScreen';\nimport {SplashScreen} from './screens/SplashScreen';\nimport {PrivateRoute} from './components/PrivateRoute';\nimport {JoinScreen} from './screens/Profile/JoinScreen/JoinScreen';\nimport {PricingScreen} from './screens/Profile/PricingScreen/PricingScreen';\nimport {ThankYouScreen} from './screens/ThankYouScreen/ThankYouScreen';\nimport {EmailConfirmScreen} from './screens/Auth/EmailConfirmScreen';\nimport {ResendScreen} from './screens/Auth/ResendScreen/ResendScreen';\n\nimport actions from './store/actions';\nimport {RootState} from './store';\nimport {withTracker} from './utils/ga';\n\nimport {\n    APP_STATUS_AUTH_REQUIRED,\n    APP_STATUS_CHOOSING_PLAN,\n    APP_STATUS_ERROR,\n    APP_STATUS_FILLING_PROFILE,\n    APP_STATUS_READY,\n} from './core/profile';\n\nimport './App.css';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(actions.auth.getTokenAtStartup());\n  }, [dispatch]);\n\n  const appStatus = useSelector((state: RootState) => state.profile.status);\n\n  switch (appStatus) {\n    case APP_STATUS_AUTH_REQUIRED:\n      return (\n        <Switch>\n          <Route\n            path=\"/login/\"\n            exact={true}\n            component={withTracker(LoginScreen)}\n          />\n          <Route\n            path=\"/resend/\"\n            exact={true}\n            component={withTracker(ResendScreen)}\n          />\n          <Route\n            path=\"/login/google/done/\"\n            exact={true}\n            render={() => <GoogleAuthDoneScreen method={'login'} />}\n          />\n          <Route\n            path=\"/signup/confirm/\"\n            exact={true}\n            render={() => <EmailConfirmScreen />}\n          />\n          <Redirect to={'/login/'} />\n        </Switch>\n      );\n\n    case APP_STATUS_FILLING_PROFILE:\n      return <JoinScreen />;\n\n    case APP_STATUS_CHOOSING_PLAN:\n      return <PricingScreen />;\n\n    case APP_STATUS_READY:\n      return (\n        <Switch>\n          {' '}\n          <PrivateRoute path=\"*\" component={withTracker(ThankYouScreen)} />\n        </Switch>\n      );\n\n    case APP_STATUS_ERROR:\n      return <>'Internal error. Please, reload to continue'</>;\n  }\n\n  return <SplashScreen />;\n};\n\nexport default App;\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport jwtDecode from 'jwt-decode';\nimport * as auth from './';\nimport {STATUS} from \"../utils/status\";\n\ninterface TokenDTO {\n  token: string;\n  exp: number;\n}\n\ninterface AuthStateType {\n  access?: TokenDTO;\n  refresh?: TokenDTO;\n  errors: {};\n  signup_success: boolean;\n  status: STATUS;\n}\n\nexport interface AuthPayload {\n  access: string;\n  refresh?: string;\n  errors: string;\n  response?: string;\n  statusText?: string;\n}\n\nexport interface AuthActionsType {\n  type: string;\n  payload: AuthPayload\n}\n\nconst initialState = {\n  access: undefined,\n  refresh: undefined,\n  errors: {},\n  signup_success: false,\n  status: STATUS.ACTIVE,\n};\n\nexport default (\n  state: AuthStateType = initialState,\n  action: AuthActionsType,\n): AuthStateType => {\n  console.log(action);\n\n  switch (action.type) {\n    case auth.LOGIN_SUCCESS:\n    case auth.TOKEN_RECEIVED:\n      return {\n        ...state,\n        access: {\n          token: action.payload.access,\n          ...jwtDecode<TokenDTO>(action.payload.access),\n        },\n        refresh: {\n          token: action.payload.refresh,\n          ...jwtDecode<TokenDTO>(action.payload.refresh || ''),\n        },\n        // profile: undefined,\n        // isVerified: undefined,\n        errors: {},\n        status: STATUS.SUCCESS,\n      };\n\n    case auth.TOKEN_FAILURE:\n    case auth.LOGIN_FAILURE:\n      return {\n        ...state,\n        access: undefined,\n        refresh: undefined,\n        errors: action.payload.response || {\n          non_field_errors: action.payload.statusText,\n        },\n      };\n\n    case auth.SIGNUP_FAILURE:\n      return {\n        ...state,\n        access: undefined,\n        refresh: undefined,\n        errors: action.payload.response || {\n          non_field_errors: action.payload.statusText,\n        },\n        status: STATUS.FAILURE\n      };\n\n    case auth.LOGOUT:\n      return {\n        ...state,\n        access: undefined,\n        refresh: undefined,\n        status: STATUS.UPDATE_NEEDED,\n      };\n\n    case auth.SIGNUP_SUCCESS:\n      return {\n        ...state,\n        signup_success: true,\n        status: STATUS.SUCCESS,\n      };\n    default:\n      return state;\n  }\n};\n\n\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {APP_STATUS_ERROR, APP_STATUS_SPLASH, Profile} from '../../core/profile';\nimport {ProfileActions} from './';\n\nexport interface ProfileState extends Profile {}\n\nconst initialState: ProfileState = {\n  status: APP_STATUS_SPLASH,\n  email: '',\n  name: '',\n  job: '',\n  industry: '',\n};\n\nexport default function createReducer(\n  state: ProfileState = initialState,\n  action: ProfileActions,\n): ProfileState {\n  switch (action.type) {\n    case 'PROFILE_REQUEST':\n      return state;\n    case 'PROFILE_SUCCESS':\n      return action?.payload ? action.payload : state;\n    case 'PROFILE_FAILURE':\n      return {\n        ...state,\n        status: APP_STATUS_ERROR,\n      };\n\n    case 'PROFILE_UPDATE_STATUS':\n      return {\n        ...state,\n        status: action.status,\n      };\n  }\n\n  return state;\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {createDataLoaderReducer} from \"../dataloader/reducer\";\nimport {Feature} from \"../../core/features\";\nimport {FEATURES_PREFIX} from \"./\";\n\nexport default createDataLoaderReducer<Feature>(FEATURES_PREFIX)\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {combineReducers} from 'redux';\nimport * as actionTypes from './index';\nimport {STATUS} from '../utils/status';\nimport {DataLoaderDetailsActions, DataLoaderListActions} from './types';\n\nexport type DataItem<T> = {\n  data?: T;\n  status: STATUS;\n};\n\nexport type DataLoaderDetailsState<T> = {\n  data: Record<string, DataItem<T>>;\n  hashes: Record<string, DataItem<T>>;\n};\n\nexport type DataLoaderListState<T> = {\n  data: Array<T>;\n  error?: boolean;\n  status: STATUS;\n};\n\nexport type DataloaderState<T> = {\n  readonly List: DataLoaderListState<T>;\n  readonly Details: DataLoaderDetailsState<T>;\n};\n\nexport function createDataLoaderReducer<T>(prefix: string = '') {\n  const initialState: DataloaderState<T> = {\n    List: {\n      data: [],\n      error: undefined,\n      status: STATUS.UPDATE_NEEDED,\n    },\n    Details: {\n      data: {},\n      hashes: {},\n    },\n  };\n\n  const dataLoaderListReducer = function(\n    state: DataLoaderListState<T> = initialState.List,\n    action: DataLoaderListActions<T>,\n  ): DataLoaderListState<T> {\n    switch (action.type) {\n      case prefix + actionTypes.LIST_REQUEST:\n        return {...state, status: STATUS.LOADING};\n\n      case prefix + actionTypes.LIST_SUCCESS:\n        return {\n          ...state,\n          data: action.payload ? action.payload : [],\n          status: STATUS.SUCCESS,\n        };\n\n      case prefix + actionTypes.LIST_FAILURE:\n        return {\n          ...state,\n          data: [],\n          status: STATUS.FAILURE,\n          error: action?.error,\n        };\n\n      default:\n        return state;\n    }\n  };\n\n  const dataLoaderDetailsReducer = function(\n    state: DataLoaderDetailsState<T> = initialState.Details,\n    action: DataLoaderDetailsActions<T>,\n  ): DataLoaderDetailsState<T> {\n\n    const updateDetailState = (\n      state: DataLoaderDetailsState<T>,\n      id: string,\n      hash: string,\n      newData: DataItem<T>,\n    ): DataLoaderDetailsState<T> => ({\n      ...state,\n      data: {\n        ...state.data,\n        [id]: newData,\n      },\n      hashes: {\n        ...state.hashes,\n        [hash]: newData,\n      },\n    });\n\n    const id = action?.meta?.id;\n    const hash = action?.meta?.hash;\n\n    console.log(action.payload);\n\n    switch (action.type) {\n      case prefix + actionTypes.DETAIL_REQUEST:\n        return updateDetailState(state, id, hash, {status: STATUS.LOADING});\n\n      case prefix + actionTypes.UPLOAD_REQUEST:\n        return updateDetailState(state, id, hash, {\n          ...state.data[id],\n          status: STATUS.UPDATING,\n        });\n\n      case prefix + actionTypes.DETAIL_SUCCESS:\n      case prefix + actionTypes.UPLOAD_SUCCESS:\n        return updateDetailState(state, id, hash, {\n          data: action.payload,\n          status: STATUS.SUCCESS,\n        });\n\n      case prefix + actionTypes.DETAIL_FAILURE:\n      case prefix + actionTypes.UPLOAD_FAILURE:\n        return updateDetailState(state, id, hash, {\n          data: undefined,\n          status: STATUS.FAILURE,\n        });\n\n      default:\n        return state;\n    }\n  };\n\n  return combineReducers({\n    List: dataLoaderListReducer,\n    Details: dataLoaderDetailsReducer,\n  });\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {combineReducers} from 'redux';\nimport auth from './auth/reducer';\nimport profile from './profile/reducer';\nimport features from './features/reducer';\n\n\nexport default combineReducers({\n  auth,\n  profile,\n  features2: features,\n});\n\n\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {apiMiddleware, isRSAA} from 'redux-api-middleware';\n\nimport {isAccessTokenExpired, refreshToken, TOKEN_RECEIVED} from \"./auth\";\nimport {refreshAccessToken} from './auth/actions'\n\n\nexport function createApiMiddleware() {\n  let postponedRSAAs = [];\n\n  return ({ dispatch, getState }) => {\n    const rsaaMiddleware = apiMiddleware({dispatch, getState});\n\n    return (next) => (action) => {\n      const nextCheckPostoned = (nextAction) => {\n          // Run postponed actions after token refresh\n          if (nextAction.type === TOKEN_RECEIVED) {\n            next(nextAction);\n            postponedRSAAs.forEach((postponed) => {\n              rsaaMiddleware(next)(postponed)\n            });\n            postponedRSAAs = []\n          } else {\n            next(nextAction)\n          }\n      };\n\n      if(isRSAA(action)) {\n        const state = getState(),\n              token = refreshToken(state);\n\n              console.log(\"HUEKIN\", token);\n\n        if(token && isAccessTokenExpired(state)) {\n          postponedRSAAs.push(action);\n          if(postponedRSAAs.length === 1) {\n            return  rsaaMiddleware(nextCheckPostoned)(refreshAccessToken(token))\n          } else {\n            return\n          }\n        }\n\n        return rsaaMiddleware(next)(action);\n      }\n      return next(action);\n    }\n  }\n}\n\nexport default createApiMiddleware();\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport {applyMiddleware, compose, createStore} from 'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport createApiMiddleware from './middleware';\n\n\nlet composeEnhancers : typeof compose;\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n  composeEnhancers = composeWithDevTools({});\n} else {\n  composeEnhancers = compose;\n}\n\nexport type RootState = ReturnType<typeof reducer>;\n\nexport default function configureStore() {\n  return createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(createApiMiddleware, thunk)),\n  );\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n * Lean tool - hypothesis testing application\n *\n * https://github.com/MikaelLazarev/lean-tool/\n * Copyright (c) 2020. Mikhail Lazarev\n *\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport configureStore from './store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPixel from 'react-facebook-pixel';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from \"react-ga\";\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {fas} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fas);\n\nconst store = configureStore();\n\n// Sentry\nif (process.env.NODE_ENV === \"production\") {\n    Sentry.init({dsn: \"https://cd19416ad99349d0bc8df4b50b374d4e@sentry.io/3026714\"});\n}\n\n// Google analytics\nReactGA.initialize('UA-159014001-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nconst options = {\n    autoConfig: true, // set pixel's autoConfig\n    debug: false, // enable logs\n};\nReactPixel.init('yourPixelIdGoesHere');\n\nReactPixel.pageView(); // For tracking page view\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.6a2affcd.png\";"],"sourceRoot":""}